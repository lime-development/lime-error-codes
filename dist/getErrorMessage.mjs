!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["@lime-development/lime-errors-codes"]=t():e["@lime-development/lime-errors-codes"]=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{getErrorMessage:()=>o});const n=JSON.parse('{"F0":{"en":"Implementation must be not 0x0.","tech":"MemeFactory:initialize Implementation must be not 0x0."},"F1":{"en":"Insufficient token balance.","tech":"MemeFactory:withdrawProcotolFee Insufficient token balance."},"F2":{"en":"Insufficient allowance.","tech":"MemeFactory:createERC20 Insufficient allowance."},"F3":{"en":"Pool already initialized.","tech":"MemeFactory:createERC20 Pool already initialized."},"F4":{"en":"Invalid implementation.","tech":"MemeFactory:updateImplementation Invalid implementation."},"F5":{"en":"Invalid startIndex.","tech":"MemeFactory:updateTokensBatch UpdateTokensBatch: Invalid startIndex."},"F6":{"en":"Invalid startIndex.","tech":"MemeFactory:collectPoolsFees UpdateTokensBatch: Invalid startIndex."},"F7":{"en":"Invalid startIndex.","tech":"MemeFactory:pauseTokensBatch UpdateTokensBatch: Invalid startIndex."},"F8":{"en":"Invalid startIndex.","tech":"MemeFactory:unpauseTokensBatch UpdateTokensBatch: Invalid startIndex."},"UNKNOWN":{"en":"Unknown error.","tech":"Error code not find."}}');function o(e,t="en"){return n[e]?.[t]||n.UNKNOWN?.[t]||`Unknown error (${e})`}return t})()));